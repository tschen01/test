{"version":3,"sources":["Nav.js","Lobby.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Nav","console","log","navStyle","color","className","to","style","Lobby","useState","response","setResponse","useEffect","socketIOClient","on","data","dateTime","Login","Home","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gQAyBeA,MArBf,WACIC,QAAQC,IAAI,YACZ,IAAMC,EAAW,CACbC,MAAO,SAEb,OACE,6BACI,oCACA,wBAAIC,UAAU,aACd,kBAAC,IAAD,CAAMC,GAAG,SAASC,MAAOJ,GACrB,sCAEJ,kBAAC,IAAD,CAAMG,GAAG,SAASC,MAAOJ,GACrB,2C,yBCQGK,MApBf,WACIP,QAAQC,IAAI,cADC,MAEmBO,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAUf,OANEC,qBAAU,WACOC,IAPJ,yBAQJC,GAAG,WAAW,SAAAC,GACnBJ,EAAYI,QAEb,IAEH,6BACE,uCACA,mCACO,0BAAMC,SAAUN,GAAWA,MCRzBO,MARf,WAGE,OAFEhB,QAAQC,IAAI,cAGZ,wC,OCeJ,IAAMgB,EAAO,WACX,OACE,6BACE,sCAKSC,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWd,IAChC,kBAAC,IAAD,CAAOY,KAAK,SAASE,UAAWL,QCHpCM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BzC,QAAQC,IACN,iHAKE6B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBnC,QAAQC,IAAI,sCAGR6B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL7C,QAAQ6C,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,QAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,QAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAzB,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL5C,QAAQC,IACN,oEAvFAgE,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjClC,QAAQC,IACN,iHAMJ2B,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.7a8c386f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    console.log(\"into Nav\");\r\n    const navStyle = {\r\n        color: 'white'\r\n    }\r\n  return (\r\n    <nav> \r\n        <h3>Logo</h3> \r\n        <ul className=\"nav-links\">\r\n        <Link to=\"/lobby\" style={navStyle}>\r\n            <li>Lobby</li>\r\n        </Link>\r\n        <Link to=\"/login\" style={navStyle}>\r\n            <li>log out</li>\r\n        </Link>\r\n        </ul>\r\n    </nav>\r\n\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4002\";\r\n\r\nfunction Lobby() {\r\n    console.log(\"into Lobby\");\r\n    const [response, setResponse] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      const socket = socketIOClient(ENDPOINT);\r\n      socket.on(\"FromAPI\", data => {\r\n        setResponse(data);\r\n      });\r\n    }, []);\r\n  return (\r\n    <div>\r\n      <h1> Lobby </h1>\r\n      <p>\r\n        It's <time dateTime={response}>{response}</time>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lobby;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Login() {\r\n    console.log(\"into Login\");\r\n\r\n  return (\r\n    <h1> Login </h1>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Lobby from './Lobby';\nimport Login from './Login';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/lobby\" component={Lobby}/>\n          <Route path=\"/login\" component={Login}/>\n        </Switch>\n      </div>  \n    </Router>\n  );\n}\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Home</h1>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}